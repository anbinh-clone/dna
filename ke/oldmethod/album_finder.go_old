package ke

import (
	"dna"
	"dna/http"
	"dna/item"
	"dna/sqlpg"
	"dna/utils"
)

// AlbumFinder defines a struct ofgetting new albums
type AlbumFinder struct {
	PageId dna.Int // Page id of new albums
	Keys   dna.StringArray
}

// NewAlbumFinder return new AlbumFinder
func NewAlbumFinder() *AlbumFinder {
	af := new(AlbumFinder)
	af.PageId = 0
	af.Keys = dna.StringArray{}
	return af
}

func GetAlbumFinder(pageId dna.Int) (*AlbumFinder, error) {

	var albumFinder = NewAlbumFinder()
	albumFinder.PageId = pageId
	link := "http://www.keeng.vn/album/album-moi.html?page=" + pageId.ToString()
	// dna.Log(link)
	result, err := http.Get(link)
	if err == nil {
		data := &result.Data

		keysArr := data.FindAllString(`<a class="link" href="/album/.+`, -1)
		keysArr.ForEach(func(val dna.String, idx dna.Int) {
			tmp := val.GetTagAttributes("href")
			keyArr := tmp.FindAllStringSubmatch(`/([A-Z0-9a-z]+)\.html`, -1)
			if len(keyArr) > 0 {
				albumFinder.Keys.Push(keyArr[0][1])
			}

		})
		return albumFinder, nil
	} else {
		return nil, err
	}
}

// Fetch implements item.Item interface.
// Returns error if can not get item
func (af *AlbumFinder) Fetch() error {
	_af, err := GetAlbumFinder(af.PageId)
	if err != nil {
		return err
	} else {
		*af = *_af
		return nil
	}
}

// GetId implements GetId methods of item.Item interface
func (af *AlbumFinder) GetId() dna.Int {
	return af.PageId
}

// New implements item.Item interface
// Returns new item.Item interface
func (af *AlbumFinder) New() item.Item {
	return item.Item(NewAlbumFinder())
}

// Init implements item.Item interface.
// dna.Interface v has type int or dna.Int, it calls Id field.
func (af *AlbumFinder) Init(v interface{}) {
	switch v.(type) {
	case int:
		af.PageId = dna.Int(v.(int))
	case dna.Int:
		af.PageId = v.(dna.Int)
	default:
		panic("Interface v has to be int")
	}
}

func (af *AlbumFinder) Save(db *sqlpg.DB) error {
	newKeys, err := utils.SelectMissingIds("kealbums", &af.Keys, db)
	if err != nil {
		return err
	}
	AlbumKeys = AlbumKeys.Concat(*newKeys)
	return nil
}
